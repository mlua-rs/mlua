[package]
name = "mlua"
version = "0.9.9" # remember to update mlua_derive
authors = ["Aleksandr Orlenko <zxteam@pm.me>", "kyren <catherine@kyju.org>"]
rust-version = "1.71"
edition = "2021"
repository = "https://github.com/khvzak/mlua"
documentation = "https://docs.rs/mlua"
readme = "README.md"
keywords = ["lua", "luajit", "luau", "async", "scripting"]
categories = ["api-bindings", "asynchronous"]
license = "MIT"
description = """
High level bindings to Lua 5.4/5.3/5.2/5.1 (including LuaJIT) and Roblox Luau
with async/await features and support of writing native Lua modules in Rust.
"""

[package.metadata.docs.rs]
features = ["lua54", "vendored", "async", "send", "serialize", "macros", "parking_lot", "unstable"]
rustdoc-args = ["--cfg", "docsrs"]

[workspace]
members = [
    "mlua_derive",
    "mlua-sys",
]

[features]
lua54 = ["ffi/lua54"]
lua53 = ["ffi/lua53"]
lua52 = ["ffi/lua52"]
lua51 = ["ffi/lua51"]
luajit = ["ffi/luajit"]
luajit52 = ["luajit", "ffi/luajit52"]
luau = ["ffi/luau", "dep:libloading"]
luau-jit = ["luau", "ffi/luau-codegen"]
luau-vector4 = ["luau", "ffi/luau-vector4"]
vendored = ["ffi/vendored"]
module = ["dep:mlua_derive", "ffi/module"]
async = ["dep:futures-util"]
send = []
serialize = ["dep:serde", "dep:erased-serde", "dep:serde-value"]
uuid = ["dep:uuid", "dep:serde"]
time = ["dep:time"]
json = ["serialize", "serde_json"]
macros = ["mlua_derive/macros"]
unstable = []

[dependencies]
mlua_derive = { version = "=0.9.3", optional = true, path = "mlua_derive" }
bstr = { version = "1.0", features = ["std"], default-features = false }
once_cell = { version = "1.0" }
num-traits = { version = "0.2.14" }
rustc-hash = "2.0"
futures-util = { version = "0.3", optional = true, default-features = false, features = ["std"] }
serde = { version = "1.0", optional = true }
serde_json = { version = "1.0", optional = true}
uuid = { version = "1.10.0", optional = true, features = ["v7", "serde"]}
erased-serde = { version = "0.4", optional = true }
serde-value = { version = "0.7", optional = true }
time = {version = "0.3.36", optional = true, features = ["parsing"]}
parking_lot = { version = "0.12", optional = true }

ffi = { package = "mlua-sys", version = "0.6.1", path = "mlua-sys" }

[target.'cfg(unix)'.dependencies]
libloading = { version = "0.8", optional = true }

[dev-dependencies]
trybuild = "1.0"
futures = "0.3.5"
hyper = { version = "1.2", features = ["full"] }
hyper-util = { version = "0.1.3", features = ["full"] }
http-body-util = "0.1.1"
reqwest = { version = "0.12", features = ["json"] }
tokio = { version = "1.0", features = ["macros", "rt", "time"] }
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
maplit = "1.0"
tempfile = "3"
static_assertions = "1.0"

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
criterion = { version = "0.5", features = ["async_tokio"] }
rustyline = "14.0"
tokio = { version = "1.0", features = ["full"] }

[lints.rust]
unexpected_cfgs = { level = "allow", check-cfg = ['cfg(tarpaulin_include)'] }

[[bench]]
name = "benchmark"
harness = false
required-features = ["async"]

[[bench]]
name = "serde"
harness = false
required-features = ["serialize"]

[[example]]
name = "async_http_client"
required-features = ["async", "macros"]

[[example]]
name = "async_http_reqwest"
required-features = ["async", "serialize", "macros"]

[[example]]
name = "async_http_server"
required-features = ["async", "macros"]

[[example]]
name = "async_tcp_server"
required-features = ["async", "macros"]

[[example]]
name = "guided_tour"
required-features = ["macros"]

[[example]]
name = "serialize"
required-features = ["serialize"]

[[example]]
name = "userdata"
required-features = ["macros"]
